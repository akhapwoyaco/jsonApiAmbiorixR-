#!/bin/bash
# Comprehensive curl tests for the Flight API

# Configuration
API_URL="http://localhost:3000"
AUTH_TOKEN="dev-token-123"
AUTH_HEADER="Authorization: Bearer $AUTH_TOKEN"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Test counter
TESTS_PASSED=0
TESTS_FAILED=0

# Helper function to run tests
run_test() {
  TEST_NAME=$1
  COMMAND=$2
  EXPECTED_STATUS=$3
  
  echo -e "\n---------------------------------------------------"
  echo "Testing: $TEST_NAME"
  echo "Command: $COMMAND"
  echo -e "---------------------------------------------------"
  
  # Run the command and capture output
  RESPONSE=$(eval $COMMAND)
  EXIT_CODE=$?
  
  # Check if curl command succeeded
  if [ $EXIT_CODE -ne 0 ]; then
    echo -e "${RED}FAILED: Curl command failed with exit code $EXIT_CODE${NC}"
    TESTS_FAILED=$((TESTS_FAILED + 1))
    return
  fi
  
  # Print response for debugging
  echo "Raw response: $RESPONSE"
  
  # Extract status code from response if available
  STATUS_CODE=$(echo "$RESPONSE" | grep -o "HTTP/[0-9.]* [0-9]*" | awk '{print $2}')
  
  # If we got a status code and it matches expected, consider it passed
  if [ ! -z "$STATUS_CODE" ] && [ "$STATUS_CODE" = "$EXPECTED_STATUS" ]; then
    echo -e "${GREEN}PASSED: Status code $STATUS_CODE matches expected $EXPECTED_STATUS${NC}"
    echo "Response: $RESPONSE"
    TESTS_PASSED=$((TESTS_PASSED + 1))
  elif [ ! -z "$STATUS_CODE" ]; then
    echo -e "${RED}FAILED: Status code $STATUS_CODE doesn't match expected $EXPECTED_STATUS${NC}"
    echo "Response: $RESPONSE"
    TESTS_FAILED=$((TESTS_FAILED + 1))
  else
    # If we can't extract status code but got a response, check if it looks valid
    if [[ "$RESPONSE" == *"success"* || "$RESPONSE" == *"flight_id"* ]]; then
      echo -e "${GREEN}PASSED: Response contains expected fields${NC}"
      echo "Response: $RESPONSE"
      TESTS_PASSED=$((TESTS_PASSED + 1))
    else
      echo -e "${RED}FAILED: Response doesn't contain expected data${NC}"
      echo "Response: $RESPONSE"
      TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
  fi
}

# Store a flight ID for testing
FLIGHT_ID=""

# Test 1: Authentication failure test
run_test "Authentication Failure" "curl -s -i -X GET $API_URL/avg-dep-delay" "401"

# Test 2: Create a new flight
echo -e "\n--- Creating a new flight for testing ---"
RESPONSE=$(curl -s -H "$AUTH_HEADER" -X POST "$API_URL/flight" \
  -H "Content-Type: application/json" \
  -d '{"carrier":"UA", "origin":"JFK", "dest":"LAX", "dep_time":800, "arr_time":1100}')

# Extract flight_id from the response
FLIGHT_ID=$(echo $RESPONSE | grep -o '"flight_id":"[^"]*"' | sed 's/"flight_id":"//;s/"//')
echo "Created flight with ID: $FLIGHT_ID"

if [ -z "$FLIGHT_ID" ]; then
  echo -e "${RED}Failed to create test flight, some tests will be skipped${NC}"
else
  echo -e "${GREEN}Successfully created test flight with ID: $FLIGHT_ID${NC}"
fi

# Test 3: Get flight details
if [ ! -z "$FLIGHT_ID" ]; then
  run_test "Get Flight Details" "curl -s -H \"$AUTH_HEADER\" -X GET \"$API_URL/flight/$FLIGHT_ID\"" "200"
fi

# Test 4: Check if flight is delayed
if [ ! -z "$FLIGHT_ID" ]; then
  run_test "Check Flight Delay" "curl -s -H \"$AUTH_HEADER\" -X GET \"$API_URL/check-delay/$FLIGHT_ID\"" "200"
fi

# Test 5: Get non-existent flight (should return 404)
run_test "Get Non-existent Flight" "curl -s -i -H \"$AUTH_HEADER\" -X GET \"$API_URL/flight/non-existent-id\"" "404"

# Test 6: Get average departure delay
run_test "Get Average Departure Delay" "curl -s -H \"$AUTH_HEADER\" -X GET \"$API_URL/avg-dep-delay\"" "200"

# Test 7: Get average departure delay for specific airline
run_test "Get Average Departure Delay for Specific Airline" "curl -s -H \"$AUTH_HEADER\" -X GET \"$API_URL/avg-dep-delay?id=UA\"" "200"

# Test 8: Get top destinations
run_test "Get Top Destinations" "curl -s -H \"$AUTH_HEADER\" -X GET \"$API_URL/top-destinations/5\"" "200"

# Test 9: Update flight details
if [ ! -z "$FLIGHT_ID" ]; then
  run_test "Update Flight" "curl -s -H \"$AUTH_HEADER\" -X PUT \"$API_URL/flights/$FLIGHT_ID\" \
    -H \"Content-Type: application/json\" \
    -d '{\"arr_time\":1200, \"dep_delay\":15}'
  " "200"
fi

# Test 10: Invalid input (requesting negative number of destinations)
run_test "Invalid Input" "curl -s -i -H \"$AUTH_HEADER\" -X GET \"$API_URL/top-destinations/-1\"" "400"

# Test 11: Rate limit test (this might not trigger the rate limit)
echo -e "\n--- Testing rate limit (making multiple requests) ---"
for i in {1..5}; do
  curl -s -H "$AUTH_HEADER" -X GET "$API_URL/avg-dep-delay" > /dev/null
  echo "Request $i completed"
done
run_test "Rate Limit Test (might not trigger)" "curl -s -i -H \"$AUTH_HEADER\" -X GET \"$API_URL/avg-dep-delay\"" "200"

# Test 12: Delete flight
if [ ! -z "$FLIGHT_ID" ]; then
  run_test "Delete Flight" "curl -s -H \"$AUTH_HEADER\" -X DELETE \"$API_URL/flight/$FLIGHT_ID\"" "200"
  
  # Test 13: Verify flight is deleted (should return 404)
  run_test "Verify Flight Deleted" "curl -s -i -H \"$AUTH_HEADER\" -X GET \"$API_URL/flight/$FLIGHT_ID\"" "404"
fi

# Test 14: Missing required field in POST request
run_test "Missing Required Field" "curl -s -i -H \"$AUTH_HEADER\" -X POST \"$API_URL/flight\" \
  -H \"Content-Type: application/json\" \
  -d '{\"carrier\":\"UA\", \"origin\":\"JFK\"}'
" "400"

# Print summary
echo -e "\n---------------------------------------------------"
echo -e "TEST SUMMARY:"
echo -e "---------------------------------------------------"
echo -e "${GREEN}PASSED: $TESTS_PASSED${NC}"
echo -e "${RED}FAILED: $TESTS_FAILED${NC}"
echo -e "TOTAL: $((TESTS_PASSED + TESTS_FAILED))"
echo -e "---------------------------------------------------"

if [ $TESTS_FAILED -eq 0 ]; then
  echo -e "${GREEN}All tests passed!${NC}"
  exit 0
else
  echo -e "${RED}Some tests failed.${NC}"
  exit 1
fi